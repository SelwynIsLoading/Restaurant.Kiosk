@page "/cash-payment"
@layout KioskLayout
@using RestaurantKiosk.Components.Layout
@using RestaurantKiosk.Data.Services
@using System.Timers
@inject NavigationManager NavigationManager
@inject ICurrencyService CurrencyService
@inject ISnackbar Snackbar
@inject ILogger<CashPayment> Logger
@inject IHttpClientFactory HttpClientFactory
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>Cash Payment - Restaurant Kiosk</PageTitle>

<div class="cash-payment-container">
    <MudContainer MaxWidth="MaxWidth.Large" Class="pa-6" Style="position: relative; z-index: 1;">
        <!-- Header -->
        <MudPaper Elevation="8" Class="pa-5 mb-5" Style="background: linear-gradient(135deg, #4CAF50 0%, #81C784 100%); border-radius: 20px;">
            <MudStack AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Large" Style="color: white; font-size: 5rem;" />
                <MudText Typo="Typo.h3" Style="font-weight: 800; color: white; text-align: center;">
                    Cash Payment
                </MudText>
                <MudText Typo="Typo.h6" Style="color: rgba(255,255,255,0.9); text-align: center;">
                    Order #@OrderNumber
                </MudText>
            </MudStack>
        </MudPaper>

        @if (PaymentStatus == CashPaymentStatus.Active)
        {
            <!-- Active Payment Display -->
            <MudGrid Justify="Justify.Center" Spacing="4">
                <!-- Amount Required -->
                <MudItem xs="12" md="6">
                    <MudPaper Elevation="8" Class="pa-6" Style="border-radius: 20px; background: white; border: 3px solid #4CAF50; min-height: 200px;">
                        <MudStack AlignItems="AlignItems.Center" Spacing="3">
                            <MudIcon Icon="@Icons.Material.Filled.Receipt" Color="Color.Success" Size="Size.Large" />
                            <MudText Typo="Typo.h6" Style="font-weight: 700; color: #424242;">Total Amount Due</MudText>
                            <MudText Typo="Typo.h3" Style="font-weight: 800; color: #4CAF50;">
                                @CurrencyService.FormatPeso(TotalRequired)
                            </MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Amount Inserted -->
                <MudItem xs="12" md="6">
                    <MudPaper Elevation="8" Class="pa-6" Style="border-radius: 20px; background: linear-gradient(135deg, #FFF8F0 0%, #FFE0B2 100%); border: 3px solid #FF9800; min-height: 200px;">
                        <MudStack AlignItems="AlignItems.Center" Spacing="3">
                            <MudIcon Icon="@Icons.Material.Filled.Payments" Color="Color.Warning" Size="Size.Large" />
                            <MudText Typo="Typo.h6" Style="font-weight: 700; color: #424242;">Amount Inserted</MudText>
                            <MudText Typo="Typo.h3" Style="font-weight: 800; background: linear-gradient(135deg, #FF6F00, #FF9800); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
                                @CurrencyService.FormatPeso(AmountInserted)
                            </MudText>
                            @if (AmountInserted > 0)
                            {
                                <MudChip T="string" Color="Color.Success" Size="Size.Large" Style="font-weight: 700; font-size: 1.1rem;">
                                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small" Class="me-1" />
                                    Cash Received!
                                </MudChip>
                            }
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Remaining Amount -->
                <MudItem xs="12">
                    <MudPaper Elevation="8" Class="pa-6" Style="border-radius: 20px; background: white;">
                        <MudStack AlignItems="AlignItems.Center" Spacing="3">
                            <MudText Typo="Typo.h5" Style="font-weight: 700; color: #424242;">Remaining Balance</MudText>
                            <MudText Typo="Typo.h2" Style="@($"font-weight: 800; color: {(RemainingAmount > 0 ? "#F44336" : "#4CAF50")};")">
                                @CurrencyService.FormatPeso(RemainingAmount)
                            </MudText>
                            
                            <!-- Progress Bar -->
                            <MudProgressLinear Color="Color.Success" 
                                             Value="@GetPaymentProgress()" 
                                             Size="Size.Large" 
                                             Style="height: 40px; border-radius: 20px; width: 100%;">
                                <MudText Typo="Typo.body1" Style="font-weight: 700; color: white;">
                                    @($"{GetPaymentProgress():F0}% Complete")
                                </MudText>
                            </MudProgressLinear>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Instructions -->
                <MudItem xs="12">
                    <MudPaper Elevation="4" Class="pa-5" Style="border-radius: 16px; background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%); border: 2px solid #2196F3;">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Large" />
                            <div>
                                <MudText Typo="Typo.h6" Style="font-weight: 700; color: #1976D2; margin-bottom: 8px;">
                                    Please Insert Cash
                                </MudText>
                                <MudText Typo="Typo.body1" Style="color: #424242;">
                                    Feed bills or coins into the acceptor. The system will automatically update the amount and complete your payment when sufficient cash is received.
                                </MudText>
                            </div>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Cancel Button -->
                <MudItem xs="12">
                    <MudButton Variant="Variant.Outlined"
                             Color="Color.Error"
                             Size="Size.Large"
                             FullWidth="true"
                             OnClick="CancelPayment"
                             StartIcon="@Icons.Material.Filled.Cancel"
                             Style="border-radius: 50px; padding: 16px 32px; font-weight: 700; border-width: 2px;">
                        Cancel Payment
                    </MudButton>
                </MudItem>
            </MudGrid>
        }
        else if (PaymentStatus == CashPaymentStatus.Completed)
        {
            <!-- Payment Complete Display -->
            <MudPaper Elevation="8" Class="pa-8" Style="border-radius: 20px; background: linear-gradient(135deg, #E8F5E9 0%, #C8E6C9 100%); border: 3px solid #4CAF50;">
                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Style="color: #4CAF50; font-size: 8rem;" />
                    <MudText Typo="Typo.h3" Style="font-weight: 800; color: #2E7D32; text-align: center;">
                        Payment Successful!
                    </MudText>
                    
                    <MudDivider Style="width: 100%; border-color: #81C784;" />
                    
                    <MudStack Spacing="2" Style="width: 100%; max-width: 500px;">
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.h6" Style="font-weight: 700;">Amount Paid:</MudText>
                            <MudText Typo="Typo.h6" Style="font-weight: 800; color: #4CAF50;">
                                @CurrencyService.FormatPeso(AmountInserted)
                            </MudText>
                        </MudStack>
                        
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.h6" Style="font-weight: 700;">Total Due:</MudText>
                            <MudText Typo="Typo.h6" Style="font-weight: 700;">
                                @CurrencyService.FormatPeso(TotalRequired)
                            </MudText>
                        </MudStack>
                        
                        @if (Change > 0)
                        {
                            <MudDivider Style="border-color: #81C784;" />
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.h5" Style="font-weight: 800; color: #F57C00;">Your Change:</MudText>
                                <MudText Typo="Typo.h4" Style="font-weight: 800; color: #F57C00;">
                                    @CurrencyService.FormatPeso(Change)
                                </MudText>
                            </MudStack>
                            <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Style="border-radius: 12px;">
                                <MudText Style="font-weight: 600;">Please collect your change from the cash dispenser.</MudText>
                            </MudAlert>
                        }
                    </MudStack>
                    
                    <MudText Typo="Typo.body1" Style="color: #424242; text-align: center; margin-top: 16px;">
                        Your order has been sent to the kitchen. Thank you for your purchase!
                    </MudText>
                    
                    <MudButton Variant="Variant.Filled"
                             Color="Color.Success"
                             Size="Size.Large"
                             OnClick="ReturnToKiosk"
                             StartIcon="@Icons.Material.Filled.Home"
                             Style="border-radius: 50px; padding: 16px 48px; font-weight: 700; margin-top: 16px;">
                        Return to Menu
                    </MudButton>
                </MudStack>
            </MudPaper>
        }
        else if (PaymentStatus == CashPaymentStatus.Cancelled)
        {
            <!-- Payment Cancelled Display -->
            <MudPaper Elevation="8" Class="pa-8" Style="border-radius: 20px; background: linear-gradient(135deg, #FFEBEE 0%, #FFCDD2 100%); border: 3px solid #F44336;">
                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                    <MudIcon Icon="@Icons.Material.Filled.Cancel" Style="color: #F44336; font-size: 8rem;" />
                    <MudText Typo="Typo.h3" Style="font-weight: 800; color: #C62828; text-align: center;">
                        Payment Cancelled
                    </MudText>
                    
                    @if (AmountInserted > 0)
                    {
                        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Style="border-radius: 12px; width: 100%; max-width: 500px;">
                            <MudText Style="font-weight: 600; font-size: 1.1rem;">
                                Please collect your cash: @CurrencyService.FormatPeso(AmountInserted)
                            </MudText>
                        </MudAlert>
                    }
                    
                    <MudText Typo="Typo.body1" Style="color: #424242; text-align: center; margin-top: 16px;">
                        Your order has been cancelled. You can start a new order anytime.
                    </MudText>
                    
                    <MudButton Variant="Variant.Filled"
                             Color="Color.Primary"
                             Size="Size.Large"
                             OnClick="ReturnToKiosk"
                             StartIcon="@Icons.Material.Filled.Home"
                             Style="border-radius: 50px; padding: 16px 48px; font-weight: 700; margin-top: 16px;">
                        Return to Menu
                    </MudButton>
                </MudStack>
            </MudPaper>
        }
        else if (PaymentStatus == CashPaymentStatus.Error)
        {
            <!-- Error Display -->
            <MudPaper Elevation="8" Class="pa-8" Style="border-radius: 20px; background: white; border: 3px solid #F44336;">
                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                    <MudIcon Icon="@Icons.Material.Filled.Error" Style="color: #F44336; font-size: 8rem;" />
                    <MudText Typo="Typo.h4" Style="font-weight: 800; color: #C62828; text-align: center;">
                        Payment Error
                    </MudText>
                    <MudText Typo="Typo.body1" Style="color: #424242; text-align: center;">
                        @ErrorMessage
                    </MudText>
                    <MudButton Variant="Variant.Filled"
                             Color="Color.Primary"
                             Size="Size.Large"
                             OnClick="ReturnToCheckout"
                             StartIcon="@Icons.Material.Filled.ArrowBack"
                             Style="border-radius: 50px; padding: 16px 48px; font-weight: 700; margin-top: 16px;">
                        Back to Checkout
                    </MudButton>
                </MudStack>
            </MudPaper>
        }
    </MudContainer>
</div>

@code {
    [SupplyParameterFromQuery(Name = "orderNumber")]
    public string? OrderNumber { get; set; }

    [SupplyParameterFromQuery(Name = "totalAmount")]
    public decimal TotalAmount { get; set; }

    private System.Timers.Timer? _pollingTimer;
    private decimal TotalRequired = 0;
    private decimal AmountInserted = 0;
    private decimal RemainingAmount = 0;
    private decimal Change = 0;
    private CashPaymentStatus PaymentStatus = CashPaymentStatus.Initializing;
    private string ErrorMessage = "";
    private bool _isPolling = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(OrderNumber) || TotalAmount <= 0)
        {
            PaymentStatus = CashPaymentStatus.Error;
            ErrorMessage = "Invalid payment parameters. Please start from the checkout page.";
            return;
        }

        TotalRequired = TotalAmount;
        RemainingAmount = TotalRequired;

        await InitializePaymentSession();
        StartPolling();
    }

    private void StartPolling()
    {
        // Poll every 1 second for status updates
        _pollingTimer = new System.Timers.Timer(1000);
        _pollingTimer.Elapsed += async (sender, e) => await PollPaymentStatus();
        _pollingTimer.AutoReset = true;
        _pollingTimer.Start();
        
        Logger.LogInformation("Started polling for payment status updates (1 second interval)");
    }

    private async Task PollPaymentStatus()
    {
        // Prevent concurrent polling
        if (_isPolling || PaymentStatus == CashPaymentStatus.Completed || PaymentStatus == CashPaymentStatus.Cancelled)
        {
            return;
        }

        _isPolling = true;

        try
        {
            var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync($"{NavigationManager.BaseUri}api/cash-payment/status/{OrderNumber}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<PaymentStatusResponse>();
                
                if (result != null)
                {
                    var previousAmount = AmountInserted;
                    var previousStatus = PaymentStatus;
                    
                    AmountInserted = result.AmountInserted;
                    RemainingAmount = result.RemainingAmount;
                    Change = result.Change;
                    
                    // Parse status
                    PaymentStatus = result.Status switch
                    {
                        "Active" => CashPaymentStatus.Active,
                        "Completed" => CashPaymentStatus.Completed,
                        "Cancelled" => CashPaymentStatus.Cancelled,
                        _ => CashPaymentStatus.Active
                    };

                    // Log and notify on state changes
                    if (previousAmount != AmountInserted)
                    {
                        Logger.LogInformation("Cash amount updated: {AmountInserted}/{TotalRequired}", 
                            AmountInserted, TotalRequired);
                    }

                    if (previousStatus != PaymentStatus && PaymentStatus == CashPaymentStatus.Completed)
                    {
                        Logger.LogInformation("Payment completed: Paid={AmountInserted}, Change={Change}", 
                            AmountInserted, Change);
                        await InvokeAsync(() => 
                        {
                            Snackbar.Add("Payment completed successfully!", Severity.Success);
                            StateHasChanged();
                        });
                        StopPolling();
                    }
                    else if (previousStatus != PaymentStatus && PaymentStatus == CashPaymentStatus.Cancelled)
                    {
                        Logger.LogInformation("Payment cancelled");
                        await InvokeAsync(() => 
                        {
                            Snackbar.Add($"Payment cancelled. Please collect your cash: {CurrencyService.FormatPeso(AmountInserted)}", 
                                Severity.Warning);
                            StateHasChanged();
                        });
                        StopPolling();
                    }
                    else if (previousAmount != AmountInserted || previousStatus != PaymentStatus)
                    {
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Logger.LogWarning("Payment session not found for order: {OrderNumber}", OrderNumber);
                StopPolling();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error polling payment status");
        }
        finally
        {
            _isPolling = false;
        }
    }

    private void StopPolling()
    {
        if (_pollingTimer != null)
        {
            _pollingTimer.Stop();
            _pollingTimer.Dispose();
            _pollingTimer = null;
            Logger.LogInformation("Stopped polling for payment status");
        }
    }

    private async Task InitializePaymentSession()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient();
            
            // Use absolute URL with NavigationManager to avoid HttpClient BaseAddress issues
            var url = $"{NavigationManager.BaseUri}api/cash-payment/init";
            Logger.LogInformation("Initializing payment session - URL: {Url}", url);
            
            var payload = new
            {
                OrderNumber = OrderNumber,
                TotalAmount = TotalRequired
            };
            
            Logger.LogInformation("Payload: OrderNumber={OrderNumber}, TotalAmount={TotalAmount}", 
                OrderNumber, TotalRequired);
            
            var response = await httpClient.PostAsJsonAsync(url, payload);
            
            Logger.LogInformation("Response: StatusCode={StatusCode}", response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                PaymentStatus = CashPaymentStatus.Active;
                Logger.LogInformation("Payment session initialized for order: {OrderNumber}", OrderNumber);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                PaymentStatus = CashPaymentStatus.Error;
                ErrorMessage = "Failed to initialize payment session. Please try again.";
                Logger.LogError("Failed to initialize payment session: {StatusCode}, Content: {ErrorContent}", 
                    response.StatusCode, errorContent);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing payment session");
            PaymentStatus = CashPaymentStatus.Error;
            ErrorMessage = "An error occurred while initializing payment. Please try again.";
        }
    }

    private async Task CancelPayment()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.PostAsync($"{NavigationManager.BaseUri}api/cash-payment/cancel/{OrderNumber}", null);
            
            if (response.IsSuccessStatusCode)
            {
                PaymentStatus = CashPaymentStatus.Cancelled;
                Snackbar.Add("Payment cancelled", Severity.Info);
            }
            else
            {
                Snackbar.Add("Failed to cancel payment", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error cancelling payment");
            Snackbar.Add("Error cancelling payment", Severity.Error);
        }
    }

    private void ReturnToKiosk()
    {
        NavigationManager.NavigateTo("/kiosk");
    }

    private void ReturnToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }

    private double GetPaymentProgress()
    {
        if (TotalRequired <= 0) return 0;
        var progress = (double)(AmountInserted / TotalRequired) * 100;
        return Math.Min(progress, 100);
    }

    public async ValueTask DisposeAsync()
    {
        StopPolling();
        await Task.CompletedTask;
    }

    private enum CashPaymentStatus
    {
        Initializing,
        Active,
        Completed,
        Cancelled,
        Error
    }

    private class PaymentStatusResponse
    {
        public bool Success { get; set; }
        public string OrderNumber { get; set; } = string.Empty;
        public decimal AmountInserted { get; set; }
        public decimal TotalRequired { get; set; }
        public decimal RemainingAmount { get; set; }
        public decimal Change { get; set; }
        public string Status { get; set; } = string.Empty;
        public DateTime StartedAt { get; set; }
        public DateTime? CompletedAt { get; set; }
    }
}

